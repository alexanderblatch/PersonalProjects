package DHDB_Package;

import java.awt.EventQueue;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPasswordField;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import java.awt.GridBagLayout;
import javax.swing.JButton;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import javax.swing.SwingConstants;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JScrollPane;

/**
 *
 * @author blatcha (alex.blatch@nomura.com)
 */
public class DogHouseDatabase {

    private JFrame frmWelcome;
    private JFrame frmLogin;
    public JFrame frmMain;
    public JFrame frmReport;
    public JFrame frmAdmin;
    public JFrame popup;
    public JFrame frmUserEdit;
    public JFrame frmRecordEdit;
    private JTextField userField;
    private JPasswordField passField;
    public JTextField incFilterField;
    public JTextField excFilterField;
    public JTextField userListField;
    public boolean validUser = false;
    public boolean admin = false;

    public static void main(String[] args) {
        EventQueue.invokeLater(() -> {
            try {
                DogHouseDatabase window = new DogHouseDatabase();
                window.frmWelcome.setLocationRelativeTo(null);
                window.frmWelcome.setVisible(true);
            } catch (Exception e) {
            }
        });
    }

    public DogHouseDatabase() {
        initializeWelcomeFrame();
    }

    private void initializeWelcomeFrame() {
        frmWelcome = new JFrame();
        frmWelcome.setResizable(false);
        frmWelcome.setTitle("Dog House Database");
        frmWelcome.setBounds(100, 100, 800, 600);
        frmWelcome.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        GridBagLayout gridBagLayout = new GridBagLayout();
        gridBagLayout.columnWidths = new int[]{325, 150, 325, 0};
        gridBagLayout.rowHeights = new int[]{179, 248, 79, 0};
        gridBagLayout.columnWeights = new double[]{0.0, 0.0, 0.0, Double.MIN_VALUE};
        gridBagLayout.rowWeights = new double[]{0.0, 0.0, 0.0, Double.MIN_VALUE};
        frmWelcome.getContentPane().setLayout(gridBagLayout);

        JLabel lblBarkingmadDog = new JLabel("<html><body><font size = 7>.: Barking-Mad Dog Kennels :.</font></body></html> \n Welcome!");
        lblBarkingmadDog.setVerticalAlignment(SwingConstants.CENTER);
        lblBarkingmadDog.setHorizontalAlignment(SwingConstants.CENTER);
        GridBagConstraints gbc_lblBarkingmadDog = new GridBagConstraints();
        gbc_lblBarkingmadDog.fill = GridBagConstraints.HORIZONTAL;
        gbc_lblBarkingmadDog.gridwidth = 3;
        gbc_lblBarkingmadDog.insets = new Insets(0, 0, 5, 0);
        gbc_lblBarkingmadDog.gridx = 0;
        gbc_lblBarkingmadDog.gridy = 0;
        frmWelcome.getContentPane().add(lblBarkingmadDog, gbc_lblBarkingmadDog);

        JLabel lblWelcome = new JLabel("<html><body><font size = 4>Welcome!</font></body></html>");
        lblWelcome.setVerticalAlignment(SwingConstants.TOP);
        GridBagConstraints gbc_lblWelcome = new GridBagConstraints();
        gbc_lblWelcome.anchor = GridBagConstraints.NORTH;
        gbc_lblWelcome.insets = new Insets(0, 0, 5, 5);
        gbc_lblWelcome.gridx = 1;
        gbc_lblWelcome.gridy = 1;
        frmWelcome.getContentPane().add(lblWelcome, gbc_lblWelcome);

        JButton btnEnter = new JButton("Enter");
        btnEnter.addActionListener((ActionEvent e) -> {
            try {
                initializeLoginFrame();
                Thread.sleep(200);
                frmWelcome.dispose();
            } catch (InterruptedException e1) {
            }
        });
        GridBagConstraints gbc_btnEnter = new GridBagConstraints();
        gbc_btnEnter.fill = GridBagConstraints.BOTH;
        gbc_btnEnter.insets = new Insets(0, 0, 0, 5);
        gbc_btnEnter.gridx = 1;
        gbc_btnEnter.gridy = 2;
        frmWelcome.getContentPane().add(btnEnter, gbc_btnEnter);
    }

    private void initializeLoginFrame() {
        frmLogin = new JFrame();
        frmLogin.setResizable(false);
        frmLogin.setBounds(100, 100, 800, 600);
        frmLogin.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        GridBagLayout gridBagLayout = new GridBagLayout();
        gridBagLayout.columnWidths = new int[]{351, 134, 348, 0};
        gridBagLayout.rowHeights = new int[]{179, 123, 0, 0, 91, 0};
        gridBagLayout.columnWeights = new double[]{0.0, 1.0, 0.0, Double.MIN_VALUE};
        gridBagLayout.rowWeights = new double[]{0.0, 0.0, 0.0, 0.0, 0.0, Double.MIN_VALUE};
        frmLogin.getContentPane().setLayout(gridBagLayout);
        frmLogin.setLocationRelativeTo(frmWelcome);
        frmLogin.setVisible(true);

        JLabel lblBarkingmadDog = new JLabel("<html><body><font size = 7>.: Log-In Page :.</font></body></html>");
        lblBarkingmadDog.setHorizontalAlignment(SwingConstants.CENTER);
        GridBagConstraints gbc_lblBarkingmadDog = new GridBagConstraints();
        gbc_lblBarkingmadDog.fill = GridBagConstraints.HORIZONTAL;
        gbc_lblBarkingmadDog.gridwidth = 3;
        gbc_lblBarkingmadDog.insets = new Insets(0, 0, 5, 0);
        gbc_lblBarkingmadDog.gridx = 0;
        gbc_lblBarkingmadDog.gridy = 0;
        frmLogin.getContentPane().add(lblBarkingmadDog, gbc_lblBarkingmadDog);

        JLabel lblUsername = new JLabel("Username:");
        GridBagConstraints gbc_lblUsername = new GridBagConstraints();
        gbc_lblUsername.anchor = GridBagConstraints.EAST;
        gbc_lblUsername.insets = new Insets(0, 0, 5, 5);
        gbc_lblUsername.gridx = 0;
        gbc_lblUsername.gridy = 2;
        frmLogin.getContentPane().add(lblUsername, gbc_lblUsername);

        userField = new JTextField();
        GridBagConstraints gbc_textField = new GridBagConstraints();
        gbc_textField.insets = new Insets(0, 0, 5, 5);
        gbc_textField.fill = GridBagConstraints.HORIZONTAL;
        gbc_textField.gridx = 1;
        gbc_textField.gridy = 2;
        frmLogin.getContentPane().add(userField, gbc_textField);
        userField.setColumns(10);

        JLabel lblPassword = new JLabel("Password:");
        GridBagConstraints gbc_lblPassword = new GridBagConstraints();
        gbc_lblPassword.anchor = GridBagConstraints.EAST;
        gbc_lblPassword.insets = new Insets(0, 0, 5, 5);
        gbc_lblPassword.gridx = 0;
        gbc_lblPassword.gridy = 3;
        frmLogin.getContentPane().add(lblPassword, gbc_lblPassword);

        passField = new JPasswordField();
        passField.setEchoChar('*');
        GridBagConstraints gbc_textField_1 = new GridBagConstraints();
        gbc_textField_1.insets = new Insets(0, 0, 5, 5);
        gbc_textField_1.fill = GridBagConstraints.HORIZONTAL;
        gbc_textField_1.gridx = 1;
        gbc_textField_1.gridy = 3;
        frmLogin.getContentPane().add(passField, gbc_textField_1);
        passField.setColumns(10);

        JButton btnNewAcc = new JButton("Create an account");
        GridBagConstraints gbc_btnNewAcc = new GridBagConstraints();
        gbc_btnNewAcc.gridwidth = 3;
        gbc_btnNewAcc.gridx = 0;
        gbc_btnNewAcc.gridy = 5;
        frmLogin.getContentPane().add(btnNewAcc, gbc_btnNewAcc);
        btnNewAcc.addActionListener((ActionEvent e) -> {
            try {
                String host = "jdbc:derby://localhost:1527/DHDB";
                String uName = "NyxThatNox";
                String pWord = "Nighty-night";
                Connection conn = DriverManager.getConnection(host, uName, pWord);
                Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                String RowQuery = "SELECT * FROM User_Details ORDER BY User_ID Asc";
                ResultSet rs1 = stmt.executeQuery(RowQuery);
                rs1.last();
                Integer RowNum = rs1.getInt("User_ID") + 1;
                String AccCreation = "INSERT INTO User_Details (User_ID, Username, Password, Access)"
                        + " VALUES (" + RowNum.toString() + ", '" + userField.getText() + "', '" + passField.getText() + "', 'User')";
                stmt.executeUpdate(AccCreation);
                JFrame Popup = new JFrame();
                JLabel lbl = new JLabel("User details added: Try logging in.", SwingConstants.CENTER);
                Popup.getContentPane().add(lbl);
                Popup.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                Popup.setBounds(200,200,240,130);
                Popup.setResizable(false);
                Popup.setVisible(true);
                Popup.setLocationRelativeTo(frmLogin);
            } catch (SQLException err) {
                System.out.println(err.getMessage());
            }
        });

        JButton btnLogIn = new JButton("Log in");
        GridBagConstraints gbc_btnLogIn = new GridBagConstraints();
        gbc_btnLogIn.gridwidth = 3;
        gbc_btnLogIn.gridx = 0;
        gbc_btnLogIn.gridy = 4;
        frmLogin.getContentPane().add(btnLogIn, gbc_btnLogIn);
        btnLogIn.addActionListener((ActionEvent e) -> {
            try {
                String host = "jdbc:derby://localhost:1527/DHDB";
                String uName = "NyxThatNox";
                String pWord = "Nighty-night";
                Connection conn = DriverManager.getConnection(host, uName, pWord);
                Statement stmt = conn.createStatement();
                String RowQuery = "SELECT COUNT(*) As rowcount FROM User_Details";
                ResultSet rs1 = stmt.executeQuery(RowQuery);
                rs1.next();
                int RowNum = rs1.getInt("rowcount");
                String DetailsQuery = "SELECT * FROM User_Details";
                ResultSet rs2 = stmt.executeQuery(DetailsQuery);
                rs2.next();
                for (int i = 0; validUser != true && i < RowNum; i++) {
                    if (userField.getText().equals(rs2.getString("Username")) == true && passField.getText().equals(rs2.getString("Password")) == true) {
                        validUser = true;
                        System.out.println("Successfully matched user details!");
                        if ("Admin".equals(rs2.getString("Access"))) {
                            admin = true;
                        }
                    }
                    rs2.next();
                }
                if (validUser == true) {
                    initializeMainFrame();
                    try {
                        Thread.sleep(200);
                        frmLogin.dispose();
                    } catch (InterruptedException e1) {
                        System.out.println(e1.getMessage());
                    }
                } else {
                    JFrame popup;
                    popup = new JFrame();
                    popup.setResizable(false);
                    popup.setBounds(100, 100, 150, 120);
                    popup.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    JLabel errorlbl = new JLabel("Invalid login details!", SwingConstants.CENTER);
                    popup.getContentPane().add(errorlbl);
                    popup.setLocationRelativeTo(frmLogin);
                    popup.setVisible(true);
                }
            } catch (SQLException err) {
                System.out.println("There was an error fetching records.");
                System.out.println(err.getMessage());
            }
        });
    }

    public void initializeMainFrame() {
        frmMain = new JFrame();
        frmMain.setResizable(false);
        frmMain.setBounds(100, 100, 800, 600);
        frmMain.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        GridBagLayout gridBagLayout = new GridBagLayout();
        gridBagLayout.columnWidths = new int[]{49, 36, 517, 36, 0};
        gridBagLayout.rowHeights = new int[]{0, 24, 11, 37, 32, 0, 37, 0, 0, 184, 232, 12, 0};
        gridBagLayout.columnWeights = new double[]{0.0, 0.0, 1.0, 0.0, Double.MIN_VALUE};
        gridBagLayout.rowWeights = new double[]{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, Double.MIN_VALUE};
        frmMain.getContentPane().setLayout(gridBagLayout);
        frmMain.setLocationRelativeTo(frmLogin);
        frmMain.setVisible(true);
        
        JButton btnReturn = new JButton("Logout");
        GridBagConstraints gbc_btn = new GridBagConstraints();
        gbc_btn.fill = GridBagConstraints.HORIZONTAL;
        gbc_btn.insets = new Insets(0, 0, 5, 5);
        gbc_btn.gridx = 1;
        gbc_btn.gridy = 0;

        frmMain.getContentPane()
                .add(btnReturn, gbc_btn);
        btnReturn.addActionListener(
                (ActionEvent e) -> {
                    try {
                        initializeLoginFrame();
                        Thread.sleep(200);
                        frmMain.dispose();
                    } catch (InterruptedException e1) {
                        System.out.println(e1.getMessage());
                    }
                }
        );

        JLabel lblNewLabel = new JLabel("<html><body><font size = 7>.: Database Access :.</font></body></html>");
        lblNewLabel.setHorizontalAlignment(SwingConstants.CENTER);
        GridBagConstraints gbc_lblNewLabel = new GridBagConstraints();
        gbc_lblNewLabel.fill = GridBagConstraints.HORIZONTAL;
        gbc_lblNewLabel.gridwidth = 4;
        gbc_lblNewLabel.insets = new Insets(0, 0, 5, 0);
        gbc_lblNewLabel.gridx = 0;
        gbc_lblNewLabel.gridy = 0;
        frmMain.getContentPane().add(lblNewLabel, gbc_lblNewLabel);

        if (admin == true) {
            JButton btnAdminTools = new JButton("Admin Tools");
            GridBagConstraints gbc_btnAdminTools = new GridBagConstraints();
            gbc_btnAdminTools.fill = GridBagConstraints.HORIZONTAL;
            gbc_btnAdminTools.insets = new Insets(0, 0, 5, 5);
            gbc_btnAdminTools.gridx = 1;
            gbc_btnAdminTools.gridy = 3;
            frmMain.getContentPane().add(btnAdminTools, gbc_btnAdminTools);

            btnAdminTools.addActionListener((ActionEvent e) -> {
                try {
                    initializeAdminFrame();
                    Thread.sleep(200);
                    frmMain.dispose();
                } catch (InterruptedException e1) {
                    System.out.println(e1.getMessage());
                }
            });
        }
        JLabel lblSearchResults = new JLabel("Database Contents:");
        GridBagConstraints gbc_lblSearchResults = new GridBagConstraints();
        gbc_lblSearchResults.insets = new Insets(0, 0, 5, 5);
        gbc_lblSearchResults.gridx = 2;
        gbc_lblSearchResults.gridy = 2;
        frmMain.getContentPane().add(lblSearchResults, gbc_lblSearchResults);

        //Populate below list with names found in 'Dog' table + Dog ID - Requires Database Connection + Query
        DefaultListModel model = new DefaultListModel();
        JList list = new JList(model);
        JScrollPane scrollPane = new JScrollPane(list);
        GridBagConstraints gbc_list = new GridBagConstraints();
        gbc_list.gridheight = 8;
        gbc_list.insets = new Insets(0, 0, 5, 5);
        gbc_list.fill = GridBagConstraints.BOTH;
        gbc_list.gridx = 2;
        gbc_list.gridy = 3;
        frmMain.getContentPane().add(scrollPane, gbc_list);

        //Adds qualifying condition to search function
        JLabel lblFilter = new JLabel("Look for:");
        GridBagConstraints gbc_lblFilter = new GridBagConstraints();
        gbc_lblFilter.insets = new Insets(0, 0, 5, 5);
        gbc_lblFilter.gridx = 1;
        gbc_lblFilter.gridy = 5;
        frmMain.getContentPane().add(lblFilter, gbc_lblFilter);

        excFilterField = new JTextField();
        GridBagConstraints gbc_textField_1 = new GridBagConstraints();
        gbc_textField_1.anchor = GridBagConstraints.NORTH;
        gbc_textField_1.insets = new Insets(0, 0, 5, 5);
        gbc_textField_1.fill = GridBagConstraints.HORIZONTAL;
        gbc_textField_1.gridx = 1;
        gbc_textField_1.gridy = 6;
        frmMain.getContentPane().add(excFilterField, gbc_textField_1);
        excFilterField.setColumns(10);

        //Runs query for re-population of list, subject to the qualifiers specified
        JButton btnSearch = new JButton("Search");
        GridBagConstraints gbc_btnSearch = new GridBagConstraints();
        gbc_btnSearch.fill = GridBagConstraints.HORIZONTAL;
        gbc_btnSearch.insets = new Insets(0, 0, 5, 5);
        gbc_btnSearch.gridx = 1;
        gbc_btnSearch.gridy = 7;
        frmMain.getContentPane().add(btnSearch, gbc_btnSearch);
        btnSearch.addActionListener((ActionEvent e) -> {
            list.setSelectedIndex(model.indexOf(excFilterField.getText()));
        });

        JButton btnGenerateReport = new JButton("Generate Report");
        GridBagConstraints gbc_btnGenerateReport = new GridBagConstraints();
        gbc_btnGenerateReport.insets = new Insets(0, 0, 5, 5);
        gbc_btnGenerateReport.gridx = 1;
        gbc_btnGenerateReport.gridy = 8;
        frmMain.getContentPane().add(btnGenerateReport, gbc_btnGenerateReport);
                
        btnGenerateReport.addActionListener((ActionEvent e) -> {
            int selectionIndex = list.getSelectedIndex();
            initializeReportFrame(selectionIndex);
        });
        try {
                model.clear();
                String host = "jdbc:derby://localhost:1527/DHDB";
                String uName = "NyxThatNox";
                String pWord = "Nighty-night";
                Connection conn = DriverManager.getConnection(host, uName, pWord);

                Statement stmt = conn.createStatement();
                String Query = "Select * FROM Dog";
                String RowQuery = "SELECT COUNT(*) As rowcount FROM Dog";
                ResultSet rs1 = stmt.executeQuery(RowQuery);
                rs1.next();
                int RowNum = rs1.getInt("rowcount");
                ResultSet rs2 = stmt.executeQuery(Query);
                for (int i = 0; i < RowNum; i++) {
                    rs2.next();
                    model.addElement(rs2.getString("Pet_Name"));
                }
            } catch (SQLException err) {
                JFrame popup;
                popup = new JFrame();
                popup.setResizable(false);
                popup.setBounds(100, 100, 300, 120);
                popup.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                JLabel errorlbl = new JLabel("There was an error connecting to the database: " + err.getMessage(), SwingConstants.CENTER);
                popup.getContentPane().add(errorlbl);
                popup.setLocationRelativeTo(frmLogin);
                popup.setVisible(true);
                System.out.println(err.getMessage());
            }
        
    }

    public void initializeReportFrame(int selectionIndex) {
        String DogsName = "N/A";
        String DogsAge = "N/A";
        String Breed = "N/A";
        String OwnersName = "N/A";
        String HomeAddress = "N/A";
        String OwnersTel = "N/A";
        String VetName = "N/A";
        String VetTel = "N/A";
        try {
            String host = "jdbc:derby://localhost:1527/DHDB";
            String uName = "NyxThatNox";
            String pWord = "Nighty-night";
            Connection conn = DriverManager.getConnection(host, uName, pWord);
            Statement stmt = conn.createStatement();
            String ReportQuery = "SELECT "
                    + "Dog.Dog_ID, Dog.Pet_Name, Dog.Age, Dog.Breed, Club.Club_Name, "
                    + "Owner.Owner_FName, Owner.Owner_LName, OContact.Tel_Number "
                    + "As Owner_Tel_Number, OContact.House_Number, OContact.Street, "
                    + "OContact.City, OContact.Postcode, Vet.Vet_FName, Vet.Vet_LName, "
                    + "VContact.Tel_Number As Vet_Tel_Number "
                    + "FROM Dog AS Dog "
                    + "JOIN Owner AS Owner ON Dog.Owner_ID = Owner.Owner_ID "
                    + "JOIN Club AS Club ON Dog.Club_ID = Club.Club_ID "
                    + "JOIN Vet AS Vet ON Dog.Vet_ID = Vet.Vet_ID "
                    + "JOIN Contact AS OContact ON Owner.Contact_ID = OContact.Contact_ID "
                    + "JOIN Contact AS VContact ON Vet.Contact_ID = VContact.Contact_ID "
                    + "WHERE Dog.Dog_ID = " + (selectionIndex + 1);
            ResultSet rs = stmt.executeQuery(ReportQuery);
            rs.next();

            //Dog's name
            DogsName = rs.getString("Pet_Name");

            //Dog's age
            Integer intAge = rs.getInt("Age");
            DogsAge = intAge.toString();

            //Dog's breed
            Breed = rs.getString("Breed");

            //Owner's Name
            OwnersName = rs.getString("Owner_FName") + " " + rs.getString("Owner_LName");

            //Owner's/Dog's home address
            Integer HouseNumber = rs.getInt("House_Number");
            HomeAddress = HouseNumber.toString() + " " + rs.getString("Street")
                    + " street, " + rs.getString("City") + ", " + rs.getString("Postcode");

            //Owner's Telephone Number
            Integer OwnerTelInt = rs.getInt("Owner_Tel_Number");
            OwnersTel = "0" + OwnerTelInt.toString();

            //Vet's Name
            VetName = rs.getString("Vet_FName") + " " + rs.getString("Vet_LName");

            //Vet's Telephone Number
            Integer VetTelInt = rs.getInt("Vet_Tel_Number");
            VetTel = "0" + VetTelInt.toString();

        } catch (SQLException err) {
            System.out.println("Error fetching records... Check SQL for validity.");
            System.out.println(err.getMessage());
        }
        frmReport = new JFrame("Report: " + DogsName);
        frmReport.setBounds(100, 100, 600, 450);
        frmReport.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        GridBagLayout gridBagLayout = new GridBagLayout();
        gridBagLayout.columnWidths = new int[]{131, 346, 110, 0};
        gridBagLayout.rowHeights = new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        gridBagLayout.columnWeights = new double[]{0.0, 1.0, 0.0, Double.MIN_VALUE};
        gridBagLayout.rowWeights = new double[]{0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, Double.MIN_VALUE};
        frmReport.getContentPane().setLayout(gridBagLayout);
        frmReport.setLocationRelativeTo(frmMain);
        frmReport.setResizable(false);
        frmReport.setVisible(true);

        JLabel lblReportDocument = new JLabel("<html><body><font size = 7>.: Report Document :.</font></body></html>");
        lblReportDocument.setHorizontalAlignment(SwingConstants.CENTER);
        GridBagConstraints gbc_lblReportDocument = new GridBagConstraints();
        gbc_lblReportDocument.gridwidth = 3;
        gbc_lblReportDocument.insets = new Insets(0, 0, 5, 0);
        gbc_lblReportDocument.fill = GridBagConstraints.HORIZONTAL;
        gbc_lblReportDocument.gridx = 0;
        gbc_lblReportDocument.gridy = 0;
        frmReport.getContentPane().add(lblReportDocument, gbc_lblReportDocument);

        JLabel lblDogsName = new JLabel("Dog's Name:");
        lblDogsName.setHorizontalAlignment(SwingConstants.RIGHT);
        GridBagConstraints gbc_lblDogsName = new GridBagConstraints();
        gbc_lblDogsName.anchor = GridBagConstraints.EAST;
        gbc_lblDogsName.insets = new Insets(0, 0, 5, 5);
        gbc_lblDogsName.gridx = 0;
        gbc_lblDogsName.gridy = 1;
        frmReport.getContentPane().add(lblDogsName, gbc_lblDogsName);

        JTextArea txtDogsName = new JTextArea();
        txtDogsName.setText(DogsName);
        txtDogsName.setEditable(false);
        GridBagConstraints gbc_txtDogsName = new GridBagConstraints();
        gbc_txtDogsName.insets = new Insets(0, 0, 5, 5);
        gbc_txtDogsName.fill = GridBagConstraints.BOTH;
        gbc_txtDogsName.gridx = 1;
        gbc_txtDogsName.gridy = 1;
        frmReport.getContentPane().add(txtDogsName, gbc_txtDogsName);

        JLabel lblDogsAge = new JLabel("Dog's Age:");
        lblDogsAge.setHorizontalAlignment(SwingConstants.RIGHT);
        GridBagConstraints gbc_lblDogsAge = new GridBagConstraints();
        gbc_lblDogsAge.anchor = GridBagConstraints.EAST;
        gbc_lblDogsAge.insets = new Insets(0, 0, 5, 5);
        gbc_lblDogsAge.gridx = 0;
        gbc_lblDogsAge.gridy = 2;
        frmReport.getContentPane().add(lblDogsAge, gbc_lblDogsAge);

        JTextArea txtDogsAge = new JTextArea();
        txtDogsAge.setText(DogsAge);
        txtDogsAge.setEditable(false);
        GridBagConstraints gbc_txtDogsAge = new GridBagConstraints();
        gbc_txtDogsAge.insets = new Insets(0, 0, 5, 5);
        gbc_txtDogsAge.fill = GridBagConstraints.BOTH;
        gbc_txtDogsAge.gridx = 1;
        gbc_txtDogsAge.gridy = 2;
        frmReport.getContentPane().add(txtDogsAge, gbc_txtDogsAge);

        JLabel lblBreed = new JLabel("Breed:");
        lblBreed.setHorizontalAlignment(SwingConstants.RIGHT);
        GridBagConstraints gbc_lblBreed = new GridBagConstraints();
        gbc_lblBreed.anchor = GridBagConstraints.EAST;
        gbc_lblBreed.insets = new Insets(0, 0, 5, 5);
        gbc_lblBreed.gridx = 0;
        gbc_lblBreed.gridy = 3;
        frmReport.getContentPane().add(lblBreed, gbc_lblBreed);

        JTextArea txtBreed = new JTextArea();
        txtBreed.setText(Breed);
        txtBreed.setEditable(false);
        GridBagConstraints gbc_txtBreed = new GridBagConstraints();
        gbc_txtBreed.insets = new Insets(0, 0, 5, 5);
        gbc_txtBreed.fill = GridBagConstraints.BOTH;
        gbc_txtBreed.gridx = 1;
        gbc_txtBreed.gridy = 3;
        frmReport.getContentPane().add(txtBreed, gbc_txtBreed);

        JLabel lblOwnersName = new JLabel("Owner's Name:");
        lblOwnersName.setHorizontalAlignment(SwingConstants.RIGHT);
        GridBagConstraints gbc_lblOwnersName = new GridBagConstraints();
        gbc_lblOwnersName.anchor = GridBagConstraints.EAST;
        gbc_lblOwnersName.insets = new Insets(0, 0, 5, 5);
        gbc_lblOwnersName.gridx = 0;
        gbc_lblOwnersName.gridy = 5;
        frmReport.getContentPane().add(lblOwnersName, gbc_lblOwnersName);

        JTextArea txtOwnerName = new JTextArea();
        txtOwnerName.setText(OwnersName);
        txtOwnerName.setEditable(false);
        GridBagConstraints gbc_txtOwnerName = new GridBagConstraints();
        gbc_txtOwnerName.insets = new Insets(0, 0, 5, 5);
        gbc_txtOwnerName.fill = GridBagConstraints.BOTH;
        gbc_txtOwnerName.gridx = 1;
        gbc_txtOwnerName.gridy = 5;
        frmReport.getContentPane().add(txtOwnerName, gbc_txtOwnerName);

        JLabel lblHomeAddress = new JLabel("Home Address:");
        lblHomeAddress.setHorizontalAlignment(SwingConstants.RIGHT);
        GridBagConstraints gbc_lblHomeAddress = new GridBagConstraints();
        gbc_lblHomeAddress.anchor = GridBagConstraints.EAST;
        gbc_lblHomeAddress.insets = new Insets(0, 0, 5, 5);
        gbc_lblHomeAddress.gridx = 0;
        gbc_lblHomeAddress.gridy = 6;
        frmReport.getContentPane().add(lblHomeAddress, gbc_lblHomeAddress);

        JTextArea txtHomeAddress = new JTextArea();
        txtHomeAddress.setText(HomeAddress);
        txtHomeAddress.setEditable(false);
        GridBagConstraints gbc_txtHomeAddress = new GridBagConstraints();
        gbc_txtHomeAddress.insets = new Insets(0, 0, 5, 5);
        gbc_txtHomeAddress.fill = GridBagConstraints.BOTH;
        gbc_txtHomeAddress.gridx = 1;
        gbc_txtHomeAddress.gridy = 6;
        frmReport.getContentPane().add(txtHomeAddress, gbc_txtHomeAddress);

        JLabel lblTelNumber = new JLabel("Owner Tel. Number:");
        lblTelNumber.setHorizontalAlignment(SwingConstants.RIGHT);
        GridBagConstraints gbc_lblTelNumber = new GridBagConstraints();
        gbc_lblTelNumber.anchor = GridBagConstraints.EAST;
        gbc_lblTelNumber.insets = new Insets(0, 0, 5, 5);
        gbc_lblTelNumber.gridx = 0;
        gbc_lblTelNumber.gridy = 7;
        frmReport.getContentPane().add(lblTelNumber, gbc_lblTelNumber);

        JTextArea txtOwnersTel = new JTextArea();
        txtOwnersTel.setText(OwnersTel);
        txtOwnersTel.setEditable(false);
        GridBagConstraints gbc_txtOwnersTel = new GridBagConstraints();
        gbc_txtOwnersTel.insets = new Insets(0, 0, 5, 5);
        gbc_txtOwnersTel.fill = GridBagConstraints.BOTH;
        gbc_txtOwnersTel.gridx = 1;
        gbc_txtOwnersTel.gridy = 7;
        frmReport.getContentPane().add(txtOwnersTel, gbc_txtOwnersTel);

        JLabel lblVetName = new JLabel("Vet Name:");
        lblVetName.setHorizontalAlignment(SwingConstants.RIGHT);
        GridBagConstraints gbc_lblVetName = new GridBagConstraints();
        gbc_lblVetName.anchor = GridBagConstraints.EAST;
        gbc_lblVetName.insets = new Insets(0, 0, 5, 5);
        gbc_lblVetName.gridx = 0;
        gbc_lblVetName.gridy = 8;
        frmReport.getContentPane().add(lblVetName, gbc_lblVetName);

        JTextArea txtVetName = new JTextArea();
        txtVetName.setText(VetName);
        txtVetName.setEditable(false);
        GridBagConstraints gbc_txtVetName = new GridBagConstraints();
        gbc_txtVetName.insets = new Insets(0, 0, 5, 5);
        gbc_txtVetName.fill = GridBagConstraints.BOTH;
        gbc_txtVetName.gridx = 1;
        gbc_txtVetName.gridy = 8;
        frmReport.getContentPane().add(txtVetName, gbc_txtVetName);

        JLabel lblVetTelNumber = new JLabel("Vet Tel. Number");
        lblVetTelNumber.setHorizontalAlignment(SwingConstants.RIGHT);
        GridBagConstraints gbc_lblVetTelNumber = new GridBagConstraints();
        gbc_lblVetTelNumber.anchor = GridBagConstraints.EAST;
        gbc_lblVetTelNumber.insets = new Insets(0, 0, 5, 5);
        gbc_lblVetTelNumber.gridx = 0;
        gbc_lblVetTelNumber.gridy = 9;
        frmReport.getContentPane().add(lblVetTelNumber, gbc_lblVetTelNumber);

        JTextArea txtVetTel = new JTextArea();
        txtVetTel.setText(VetTel);
        txtVetTel.setEditable(false);
        GridBagConstraints gbc_txtVetTel = new GridBagConstraints();
        gbc_txtVetTel.insets = new Insets(0, 0, 5, 5);
        gbc_txtVetTel.fill = GridBagConstraints.BOTH;
        gbc_txtVetTel.gridx = 1;
        gbc_txtVetTel.gridy = 9;
        frmReport.getContentPane().add(txtVetTel, gbc_txtVetTel);
    }

    public void initializeAdminFrame() {

        frmAdmin = new JFrame();

        frmAdmin.setResizable(
                false);
        frmAdmin.setBounds(
                100, 100, 800, 600);
        frmAdmin.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        GridBagLayout gridBagLayout = new GridBagLayout();
        gridBagLayout.columnWidths = new int[]{49, 36, 517, 36, 49};
        gridBagLayout.rowHeights = new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        gridBagLayout.columnWeights = new double[]{0.0, 0.0, 1.0, 0.0, Double.MIN_VALUE};
        gridBagLayout.rowWeights = new double[]{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0.0, 0.0, Double.MIN_VALUE};

        frmAdmin.getContentPane()
                .setLayout(gridBagLayout);
        frmAdmin.setLocationRelativeTo(frmMain);

        frmAdmin.setVisible(
                true);

        JLabel lblNewLabel = new JLabel("<html><body><font size = 7>.: Administrative Tools :.</font></body></html>");

        lblNewLabel.setHorizontalAlignment(SwingConstants.CENTER);
        GridBagConstraints gbc_lblNewLabel = new GridBagConstraints();
        gbc_lblNewLabel.fill = GridBagConstraints.HORIZONTAL;
        gbc_lblNewLabel.gridwidth = 4;
        gbc_lblNewLabel.insets = new Insets(0, 0, 5, 0);
        gbc_lblNewLabel.gridx = 0;
        gbc_lblNewLabel.gridy = 0;

        frmAdmin.getContentPane()
                .add(lblNewLabel, gbc_lblNewLabel);

        JLabel lblUserEdits = new JLabel("Edit Users:");
        GridBagConstraints gbc_lbl = new GridBagConstraints();
        gbc_lbl.insets = new Insets(0, 0, 5, 5);
        gbc_lbl.gridx = 1;
        gbc_lbl.gridy = 1;

        frmAdmin.getContentPane()
                .add(lblUserEdits, gbc_lbl);
        

        JButton btnReturn = new JButton("Return");
        GridBagConstraints gbc_btn = new GridBagConstraints();
        gbc_btn.fill = GridBagConstraints.HORIZONTAL;
        gbc_btn.insets = new Insets(0, 0, 5, 5);
        gbc_btn.gridx = 1;
        gbc_btn.gridy = 0;

        frmAdmin.getContentPane()
                .add(btnReturn, gbc_btn);
        btnReturn.addActionListener(
                (ActionEvent e) -> {
                    try {
                        initializeMainFrame();
                        Thread.sleep(200);
                        frmAdmin.dispose();
                    } catch (InterruptedException e1) {
                        System.out.println(e1.getMessage());
                    }
                }
        );

        DefaultListModel model1 = new DefaultListModel();
        JList Userlist = new JList(model1);
        JScrollPane userScroll = new JScrollPane(Userlist);
        GridBagConstraints gbc_list = new GridBagConstraints();
        gbc_list.gridheight = 3;
        gbc_list.insets = new Insets(0, 0, 5, 5);
        gbc_list.fill = GridBagConstraints.HORIZONTAL;
        gbc_list.gridx = 2;
        gbc_list.gridy = 2;

        frmAdmin.getContentPane()
                .add(userScroll, gbc_list);

        JLabel lblRecordEdits = new JLabel("Edit DB Records:");
        gbc_lbl.gridx = 1;
        gbc_lbl.gridy = 8;

        frmAdmin.getContentPane()
                .add(lblRecordEdits, gbc_lbl);

        DefaultListModel model2 = new DefaultListModel();
        JList Recordlist = new JList(model2);
        JScrollPane recordScroll = new JScrollPane(Recordlist);
        gbc_list.gridheight = 3;
        gbc_list.insets = new Insets(0, 0, 5, 5);
        gbc_list.fill = GridBagConstraints.HORIZONTAL;
        gbc_list.gridy = 9;

        frmAdmin.getContentPane()
                .add(recordScroll, gbc_list);

        JButton btnUserEdit = new JButton("Edit User");
        gbc_btn.fill = GridBagConstraints.HORIZONTAL;
        gbc_btn.insets = new Insets(0, 0, 5, 5);
        gbc_btn.gridx = 1;
        gbc_btn.gridy = 2;

        frmAdmin.getContentPane()
                .add(btnUserEdit, gbc_btn);
                
        btnUserEdit.addActionListener((ActionEvent u) -> {
        Integer i = Userlist.getSelectedIndex() + 1;
        initializeUserEditFrame(i);
        });

        JButton btnUserDelete = new JButton("Delete User");
        gbc_btn.fill = GridBagConstraints.HORIZONTAL;
        gbc_btn.insets = new Insets(0, 0, 5, 5);
        gbc_btn.gridx = 1;
        gbc_btn.gridy = 3;

        frmAdmin.getContentPane().add(btnUserDelete, gbc_btn);

        JButton btnRecordEdit = new JButton("Edit Record");
        gbc_btn.fill = GridBagConstraints.HORIZONTAL;
        gbc_btn.insets = new Insets(0, 0, 5, 5);
        gbc_btn.gridx = 1;
        gbc_btn.gridy = 9;

        frmAdmin.getContentPane().add(btnRecordEdit, gbc_btn);

        JButton btnRecordDelete = new JButton("Delete Record");
        gbc_btn.fill = GridBagConstraints.HORIZONTAL;
        gbc_btn.insets = new Insets(0, 0, 5, 5);
        gbc_btn.gridx = 1;
        gbc_btn.gridy = 10;

        frmAdmin.getContentPane().add(btnRecordDelete, gbc_btn);

        JButton btnRecordAdd = new JButton("Add Record");
        gbc_btn.fill = GridBagConstraints.HORIZONTAL;
        gbc_btn.insets = new Insets(0, 0, 5, 5);
        gbc_btn.gridx = 1;
        gbc_btn.gridy = 11;
        frmAdmin.getContentPane().add(btnRecordAdd, gbc_btn);

        try {
            String host = "jdbc:derby://localhost:1527/DHDB";
            String uName = "NyxThatNox";
            String pWord = "Nighty-night";
            Connection conn = DriverManager.getConnection(host, uName, pWord);
            Statement stmt = conn.createStatement();
            String Query1 = "Select * FROM User_Details";
            String Query2 = "Select * FROM Dog";
            String RowQuery1 = "SELECT COUNT(*) As rowcount FROM User_Details";
            String RowQuery2 = "SELECT COUNT(*) As rowcount FROM Dog";
            ResultSet rs1 = stmt.executeQuery(RowQuery1);
            rs1.next();
            int RowNum = rs1.getInt("rowcount");
            ResultSet rs2 = stmt.executeQuery(Query1);
            for (int i = 0; i < RowNum; i++) {
                rs2.next();
                model1.addElement(rs2.getString("Username"));
            }
            ResultSet rs3 = stmt.executeQuery(RowQuery2);
            rs3.next();
            RowNum = rs3.getInt("rowcount");
            ResultSet rs4 = stmt.executeQuery(Query2);
            for (int i = 0; i < RowNum; i++) {
                rs4.next();
                model2.addElement(rs4.getString("Pet_Name"));
            }
            btnUserDelete.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    popup = new JFrame();
                    popup.setBounds(100, 100, 450, 300);
                    popup.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    GridBagLayout gridBagLayout = new GridBagLayout();
                    gridBagLayout.columnWidths = new int[]{216, 216, 0};
                    gridBagLayout.rowHeights = new int[]{29, 76, 182, 0};
                    gridBagLayout.columnWeights = new double[]{0.0, 0.0, Double.MIN_VALUE};
                    gridBagLayout.rowWeights = new double[]{0.0, 0.0, 0.0, Double.MIN_VALUE};
                    popup.getContentPane().setLayout(gridBagLayout);

                    JLabel errorlbl = new JLabel("Are you sure you want to permanently delete this user?");
                    GridBagConstraints gbc_lblNewLabel = new GridBagConstraints();
                    gbc_lblNewLabel.gridwidth = 2;
                    gbc_lblNewLabel.insets = new Insets(0, 0, 5, 5);
                    gbc_lblNewLabel.gridx = 0;
                    gbc_lblNewLabel.gridy = 1;
                    popup.getContentPane().add(errorlbl, gbc_lblNewLabel);

                    JButton yesDel = new JButton("Yes");
                    GridBagConstraints gbc_btnNewButton = new GridBagConstraints();
                    gbc_btnNewButton.insets = new Insets(0, 0, 0, 5);
                    gbc_btnNewButton.gridx = 0;
                    gbc_btnNewButton.gridy = 2;
                    popup.getContentPane().add(yesDel, gbc_btnNewButton);

                    JButton noDel = new JButton("No");
                    GridBagConstraints gbc_btnNewButton_1 = new GridBagConstraints();
                    gbc_btnNewButton_1.gridx = 1;
                    gbc_btnNewButton_1.gridy = 2;
                    popup.getContentPane().add(noDel, gbc_btnNewButton_1);
                    popup.setLocationRelativeTo(frmLogin);
                    popup.setVisible(true);
                    yesDel.addActionListener(
                        (ActionEvent y) -> {
                            Integer Index = Userlist.getSelectedIndex() + 1;
                            try {
                                ResultSet rs2 = stmt.executeQuery("SELECT * FROM User_Details");
                                int i = 0;
                                while (i != Index) {
                                    rs2.next();
                                    i++;
                                }
                                Index = rs2.getInt("User_ID");
                                stmt.executeUpdate("DELETE FROM User_Details WHERE User_ID = " + Index.toString());
                                System.out.println("Record Deleted!");
                                Thread.sleep(200);
                            } catch (SQLException | InterruptedException ex) {
                                System.out.println(ex.getMessage());
                            }
                            popup.dispose();
                        }
                    );
                    noDel.addActionListener (
                    (ActionEvent z) -> {
                        popup.dispose();
                    }
                    );
                }
            });
        } catch (SQLException err) {
            System.out.println("There was an error fetching records.");
            System.out.println(err.getMessage());
        }
        
    }
    
    public void initializeUserEditFrame(Integer i) {
        try {
                String userID = i.toString();
                String host = "jdbc:derby://localhost:1527/DHDB";
                String uName = "NyxThatNox";
                String pWord = "Nighty-night";
                Connection conn = DriverManager.getConnection(host, uName, pWord);
                Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                String Query = "SELECT * FROM User_Details WHERE User_ID = " + userID;
                ResultSet rs1 = stmt.executeQuery(Query);
                rs1.next();
        frmUserEdit = new JFrame();
		frmUserEdit.setBounds(100, 100, 600, 300);
		frmUserEdit.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		GridBagLayout gridBagLayout = new GridBagLayout();
		gridBagLayout.columnWidths = new int[]{0, 0, 0, 0, 0, 0, 0};
		gridBagLayout.rowHeights = new int[]{81, 86, 92, 0};
		gridBagLayout.columnWeights = new double[]{0.0, 1.0, 0.0, 1.0, 0.0, 1.0, Double.MIN_VALUE};
		gridBagLayout.rowWeights = new double[]{0.0, 0.0, 0.0, Double.MIN_VALUE};
		frmUserEdit.getContentPane().setLayout(gridBagLayout);
                frmUserEdit.setLocationRelativeTo(frmAdmin);
		
		JLabel lblUserDetail = new JLabel("<html><body><font size = 7>.: User Detail Editing :.</font></body></html>");
		GridBagConstraints gbc_lblUserDetail = new GridBagConstraints();
		gbc_lblUserDetail.gridwidth = 6;
		gbc_lblUserDetail.insets = new Insets(0, 0, 5, 0);
		gbc_lblUserDetail.gridx = 0;
		gbc_lblUserDetail.gridy = 0;
		frmUserEdit.getContentPane().add(lblUserDetail, gbc_lblUserDetail);
		
		JLabel lblUsername = new JLabel("Username:");
		GridBagConstraints gbc_lblUsername = new GridBagConstraints();
		gbc_lblUsername.insets = new Insets(0, 0, 5, 5);
		gbc_lblUsername.anchor = GridBagConstraints.EAST;
		gbc_lblUsername.gridx = 0;
		gbc_lblUsername.gridy = 1;
		frmUserEdit.getContentPane().add(lblUsername, gbc_lblUsername);
		
		JTextField userField = new JTextField(rs1.getString("Username"));
		GridBagConstraints gbc_textField = new GridBagConstraints();
		gbc_textField.insets = new Insets(0, 0, 5, 5);
		gbc_textField.fill = GridBagConstraints.HORIZONTAL;
		gbc_textField.gridx = 1;
		gbc_textField.gridy = 1;
		frmUserEdit.getContentPane().add(userField, gbc_textField);
		userField.setColumns(10);
		
		JLabel lblPassword = new JLabel("Password:");
		GridBagConstraints gbc_lblPassword = new GridBagConstraints();
		gbc_lblPassword.anchor = GridBagConstraints.EAST;
		gbc_lblPassword.insets = new Insets(0, 0, 5, 5);
		gbc_lblPassword.gridx = 2;
		gbc_lblPassword.gridy = 1;
		frmUserEdit.getContentPane().add(lblPassword, gbc_lblPassword);
		
		JTextField PassField = new JTextField(rs1.getString("Password"));
		GridBagConstraints gbc_textField_1 = new GridBagConstraints();
		gbc_textField_1.insets = new Insets(0, 0, 5, 5);
		gbc_textField_1.fill = GridBagConstraints.HORIZONTAL;
		gbc_textField_1.gridx = 3;
		gbc_textField_1.gridy = 1;
		frmUserEdit.getContentPane().add(PassField, gbc_textField_1);
		PassField.setColumns(10);
		
		JLabel lblAccess = new JLabel("Access:");
		GridBagConstraints gbc_lblAccess = new GridBagConstraints();
		gbc_lblAccess.anchor = GridBagConstraints.EAST;
		gbc_lblAccess.insets = new Insets(0, 0, 5, 5);
		gbc_lblAccess.gridx = 4;
		gbc_lblAccess.gridy = 1;
		frmUserEdit.getContentPane().add(lblAccess, gbc_lblAccess);
		
		JTextField accessField = new JTextField(rs1.getString("Access"));
		GridBagConstraints gbc_textField_2 = new GridBagConstraints();
		gbc_textField_2.insets = new Insets(0, 0, 5, 0);
		gbc_textField_2.fill = GridBagConstraints.HORIZONTAL;
		gbc_textField_2.gridx = 5;
		gbc_textField_2.gridy = 1;
		frmUserEdit.getContentPane().add(accessField, gbc_textField_2);
		accessField.setColumns(10);
		
		JButton btnConfirm = new JButton("Confirm");
		btnConfirm.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
                            try {
                                stmt.executeUpdate("UPDATE User_Details SET Username = '" 
                                        + userField.getText()
                                        + "', Password = '"
                                        + PassField.getText()
                                        + "', Access = '"
                                        + accessField.getText()
                                        + "' WHERE User_ID = " + userID);
                                frmUserEdit.dispose();
                            } catch (SQLException ex) {
                                System.out.println(ex.getMessage());
                            }
                        }
		});
		GridBagConstraints gbc_btnNewButton = new GridBagConstraints();
		gbc_btnNewButton.gridwidth = 3;
		gbc_btnNewButton.insets = new Insets(0, 0, 0, 5);
		gbc_btnNewButton.gridx = 0;
		gbc_btnNewButton.gridy = 2;
		frmUserEdit.getContentPane().add(btnConfirm, gbc_btnNewButton);
		
		JButton btnCancel = new JButton("Cancel");
		GridBagConstraints gbc_btnNewButton_1 = new GridBagConstraints();
		gbc_btnNewButton_1.gridwidth = 3;
		gbc_btnNewButton_1.insets = new Insets(0, 0, 0, 5);
		gbc_btnNewButton_1.gridx = 3;
		gbc_btnNewButton_1.gridy = 2;
		frmUserEdit.getContentPane().add(btnCancel, gbc_btnNewButton_1);
                
                btnCancel.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        frmUserEdit.dispose();
                    }
                });
                
                frmUserEdit.setVisible(true);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }
}
    
